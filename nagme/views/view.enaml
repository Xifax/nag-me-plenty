'''
from enaml.widgets.api import Window, Form, Label, Field

enamldef PersonView(Window):
    attr person
    title = 'Person View'
    Form:
        Label:
            text = 'First Name'
        Field:
            text := person.first_name
        Label:
            text = 'Last Name'
        Field:
            text = person.last_name
'''
'''
from enaml.widgets.api import (
    Window, Container, PushButton, Menu, Action, Field
)


enamldef PopupMenu(Menu):
    Action:
        text = 'foo'
        triggered :: print text + ' triggered'
    Action:
        text = 'bar'
        triggered :: print text + ' triggered'
    Action:
        text = 'baz'
        triggered :: print text + ' triggered'
    Action:
        text = 'spam'
        triggered :: print text + ' triggered'
    Action:
        text = 'ham'
        triggered :: print text + ' triggered'


enamldef Main(Window):
    Container:
        PushButton:
            text = 'Popup Menu'
            clicked :: PopupMenu().popup()
        Field:
            text = 'Context Menu'
            read_only = True
            PopupMenu:
                context_menu = True
'''

from enaml.core.api import Include
from enaml.core.conditional import Conditional
from enaml.widgets.api import (
    Window, Container, PopupView, Form, Label, PushButton, ComboBox, Slider,
    Field, SpinBox
)
from enaml.styling import StyleSheet, Style, Setter

from models import Models

from enaml.layout.api import vbox


'''
POSITIONS = {
    'Top Left': (0.0, 0.0),
    'Top Center': (0.5, 0.0),
    'Top Right': (1.0, 0.0),
    'Left': (0.0, 0.5),
    'Center': (0.5, 0.5),
    'Right': (1.0, 0.5),
    'Bottom Left': (0.0, 1.0),
    'Bottom Center': (0.5, 1.0),
    'Bottom Right': (1.0, 1.0),
}


enamldef ConfigPopup(PopupView): popup:
    foreground = 'white'
    background = 'rgba(30, 30, 30, 0.85)'
    parent_anchor << POSITIONS[parent_box.selected_item]
    anchor << POSITIONS[view_box.selected_item]
    arrow_size << sizer.value
    arrow_edge << arrow_edge.selected_item
    offset << (offset_x.value, offset_y.value)
    Form:
        padding = 20
        Label:
            foreground = 'white'
            text = 'Arrow Size'
        Slider: sizer:
            minimum = 5
            maximum = 30
            value = 20
        Label:
            foreground = 'white'
            text = 'Arrow Edge'
        ComboBox: arrow_edge:
            items = ['top', 'bottom', 'left', 'right']
            index = 0
        Label:
            foreground = 'white'
            text = 'Parent Anchor'
        ComboBox: parent_box:
            items = sorted(POSITIONS.keys())
            index = items.index('Center')
        Label:
            foreground = 'white'
            text = 'View Anchor'
        ComboBox: view_box:
            items = sorted(POSITIONS.keys())
            index = items.index('Top Center')
        Label:
            foreground = 'white'
            text = 'Offset X'
        SpinBox: offset_x:
            minimum = -30
            maximum = 30
        Label:
            foreground = 'white'
            text = 'Offset Y'
        SpinBox: offset_y:
            minimum = -30
            maximum = 30
        Include: inc:
            pass
        PushButton:
            text = 'Add Row'
            clicked ::
                items = [Label(text='Label', foreground='white'), Field()]
                inc.objects.extend(items)
        PushButton:
            text = 'Close'
            clicked :: popup.close()


enamldef NotificationPopup(PopupView):
    foreground = 'white'
    background = 'rgba(30, 30, 30, 0.85)'
    window_type = 'tool_tip'
    parent_anchor = (1.0, 1.0)
    anchor = (1.0, 1.0)
    offset = (-10, -10)
    timeout = 5
    fade_in_duration = 500
    fade_out_duration = 500
    Container:
        Label:
            foreground = 'white'
            text = 'Hello Enaml Notifications'
            align = 'center'
        PushButton:
            text = 'Close'
            clicked :: parent.hide()
'''

enamldef BannerSheet(StyleSheet):
    Style:
        element = 'Label'
        style_class = 'banner'
        Setter:
            field = 'background'
            value = ('lineargradient(x1: 0, y1:0, x2:0, y2:1, '
                     'stop: 0 #222222, stop: 0.5 #1A1A1A, stop: 1 #111111)')
        Setter:
            field = 'color'
            value = '#FFFFEF'
        Setter:
            field = 'padding'
            value = '5px'
        Setter:
            field = 'text-align'
            value = 'center'
        Setter:
            field = 'font'
            value = '18pt Ubuntu Mono'

enamldef Main(Window): win:
    # initial_size = (400, 400)
    # attr show_models: bool = False
    BannerSheet:
        pass
    Container: container:
        Label: banner:
            text = 'Nag Me Plenty'
            style_class << 'banner'
        PushButton: show_models:
            text = 'Manage Models'
            tool_tip = 'Create, update and delete data models'
            # checked := show_models
            checkable = True
            # clicked :: container.request_relayout()
        PushButton:
            visible << not show_models.checked
            text = 'List Naggets'
            tool_tip = 'View existing naggets'
        PushButton:
            visible << not show_models.checked
            text = 'Options'
            tool_tip = 'Change application settings'
        Conditional: models:
            condition << show_models.checked
            Models:
                pass
        # Models: models:
        #     visible << show_models
        # PushButton:
        #     text = 'Quit'
        #     clicked :: pass

'''
        PushButton:
            text = 'Show Config Popup'
            clicked :: ConfigPopup(self).show()
        PushButton:
            text = 'Show Window Notification'
            clicked :: NotificationPopup(win, window_type='window').show()
        PushButton:
            text = 'Show Desktop Notification'
            clicked :: NotificationPopup().show()
        PushButton:
            text = 'Show Mouse Notification'
            clicked ::
                popup = NotificationPopup()
                popup.anchor_mode = 'cursor'
                popup.anchor = (0.0, 0.0)
                popup.offset = (0, 0)
                popup.timeout = 1
                popup.show()
'''
